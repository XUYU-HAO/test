#include <iostream>
#include <string>
#include <sstream>
using namespace std;

// 定義單向鏈結串列的節點結構
struct ListNode {
    int val;
    ListNode* next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
};

// 檢查鏈結串列是否為空
void isEmpty(ListNode* head) {
    if (head == nullptr) {
        cout << "true\n";
    } else {
        cout << "false\n";
    }
}

// 輸出整個鏈結串列
void printList(ListNode* head) {
    if (head == nullptr) {
        cout << "NULL\n";
        return;
    }
    ListNode* current = head;
    while (current != nullptr) {
        cout << current->val;
        if (current->next != nullptr) {
            cout << "->";
        }
        current = current->next;
    }
    cout << "->NULL\n";
}

// 在指定位置插入節點
void insertNode(ListNode*& head, int index, int value) {
    ListNode* newNode = new ListNode(value);

    if (index == 0) {
        // 插入到頭部
        newNode->next = head;
        head = newNode;
        return;
    }

    ListNode* current = head;
    int currentIndex = 0;

    while (current != nullptr && currentIndex < index - 1) {
        current = current->next;
        currentIndex++;
    }

    if (current != nullptr) {
        newNode->next = current->next;
        current->next = newNode;
    }
}

// 刪除指定位置的節點
void deleteNode(ListNode*& head, int index) {
    if (head == nullptr) return;

    if (index == 0) {
        ListNode* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    ListNode* current = head;
    int currentIndex = 0;

    while (current != nullptr && currentIndex < index - 1) {
        current = current->next;
        currentIndex++;
    }

    if (current != nullptr && current->next != nullptr) {
        ListNode* temp = current->next;
        current->next = current->next->next;
        delete temp;
    }
}

// 主程式
int main() {
    ListNode* head = nullptr; // 初始時鏈結串列為空
    string line;
    string command;
    
    while (getline(cin, line)) {
        istringstream ss(line);
        ss >> command;

        if (command == "E") {
            isEmpty(head);
        } else if (command == "P") {
            printList(head);
        } else if (command == "I") {
            int index, value;
            ss >> index >> value;
            insertNode(head, index, value);
        } else if (command == "D") {
            int index;
            ss >> index;
            deleteNode(head, index);
        }
    }

    // 清除所有動態分配的記憶體
    while (head != nullptr) {
        ListNode* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
